<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="android-dev">
  <title>Développez des applications Android avec Maven</title>

  <section id="android-dev-sect-intro">
    <title>Introduction</title>

    <para>Android est un téléphone portable et un système d'exploitation embarqué développé par l'Open Handset Alliance. 
    Il est basé sur un noyau Linux avec et possède une machine virtuelle utilisant interprétant du bytecode Java.
    L'environnement de développement est basé sur le langage Java et les outils du JDK et de la JVM.
    Le bytecode Java généré  est transformé en code exécutable Dalvik optimisé pour répondre aux contraintes liées aux enjeux de la mobilité.
    Java est le langage de programmation par défaut, les différentes API sont basées sur celui-ci.</para>

    <para>Dans la plupart des cas, le développement d'applications Android s'effectue dans Eclipse avec l'Android Development Toolkit (<acronym>ADT</acronym>).
    Il vous est également possible de construire vos applications en dehors de cet IDE en utilisant par l'intermédiaire d'Apache Ant.
    Le pluging Maven Android a été créé pour permettre aux équipes de développement de construire, déployer et la publier des applications Android avec Apache Maven, 
    permettant ainsi de tirer parti des fonctionnalités disponibles comme la gestion des dépendances, le reporting ou l'analyse de code…</para>
  </section>

  <section id="android-dev-sect-config-build">
    <title>Configurez un environnement de build pour le développement Android</title>

    <para><indexterm>
        <primary>Android</primary>

        <secondary>configurez un environnement de build</secondary>
      </indexterm>Avant d'essayer de construire vos bibliothèques et vos applications Maven, vous devez effectuer les tâches suivantes :</para>

    <itemizedlist>
      <listitem>
        <para>Installation du SDK Android</para>
      </listitem>

      <listitem>
        <para>Installation des jars de l'API Android dans un dépôt local ou distant</para>
      </listitem>

      <listitem>
        <para>Configurer Maven pour simplifier l'utilisation du Maven Android Plugin</para>
      </listitem>
    </itemizedlist>

    <section id="android-dev-sect-sdk-install">
      <title>Installation du SDK Android</title>

      <para>Le plugin Android Maven nécessite la présence du SDK Android dans votre environnement de développement.
      La variable d'environnement <varname>ANDROID_HOME</varname> doit être configurée pour pointer vers le répertoire d'installation du SDK Android.
      Le SDK doit être installé en suivant les consignes du site web Android Developer dont voici l'adresse <uri>http://developer.android.com/sdk/index.html</uri>. 
      Par exemple, si le sdk est installé dans le répertoire <varname>/opt/android-sdk-linux </varname>, 
      la commande suivante permet d'initialiser cette variable correctement <programlisting>export ANDROID_HOME=/opt/android-sdk-linux</programlisting> sur un environnement Unix/bash.
      Sous Windows, utilisez la commande suivante : <programlisting>set ANDROID_HOME=C:\\opt\android-sdk-linux</programlisting></para>

      <para>En plus du SDK, les différentes versions des plates-formes dont vous avez besoin pour le développement doivent également être installées.
      Les consignes d'installation sont détaillées à cette adresse : <uri>http://developer.android.com/sdk/adding-components.html</uri>. 
      Vous pouvez installer les versions des plates-formes que vous vous avez besoin, ou, plus simplement, vous contenter d'installer toutes les plates-formes.
      De plus, vous pouvez également rajouter le répertoire <varname>ANDROID_HOME/tools</varname> à votre <varname>PATH</varname> pour vous faciliter l'utilisation des différents outils fournis par le SDK en ligne de commande.</para> 
    </section>

    <section id="android-dev-sect-repository-install">
      <title>Installation des artifacts Android dans un dépôt Maven</title>

      <para>Une fois que le SDK est installé, vous devez mettre à disposition les différents JARs d'API dans un dépôt Maven. 
      L'outil Maven Android SDK Deployer vous permet d'effectuer cette tâche en déployant ces JARs soit dans votre dépôt local, soit sur un dépôt distant.
<!-- TODO link to nexus... in general how much do we have
        to explain here about this stuff, i would prefer to add links to the nexus book chapters somehow.. --></para>

      <para>Cet outil, le Maven Android SDK Deployer est disponible à cette adresse :</para>

      <para><uri>http://github.com/mosabua/maven-android-sdk-deployer</uri></para>

      <para>Cliquez simplement sur le button <varname>Download Source</varname> et dézippez l'archive téléchargée dans le dossier de votre choix.
      Un dossier avec urn nom du type <varname>mosabua-maven-android-sdk-deployer-XXX</varname> sera alors créé. 
      <varname>XXX</varname> désignant un numéro de révision du type <varname>df824df</varname>. 
      Déplacez-vous ensuite dans ce nouveau répertoire :<programlisting>cd mosabua-maven-android-sdk-deployer-df824df</programlisting></para>

      <section id="android-dev-sect-repository-install-local">
        <title>Installation dans votre dépôt local</title>

        <para>Pour installer les JARs d'API de différentes versions de plates-formes dans votre dépôt local, 
        vous pouvez exécuter la commande  suivante à partir du dossier de votre deployer : <programlisting>mvn clean install</programlisting>.
	Par défaut, cette commande installe les JARs <varname>android.jar</varname> et <varname>mas.jar</varname> dans votre dépôt local.
	Vous devriez donc trouver ces fichiers tout juste installés dans les groupes <varname>android</varname> et <varname>com.google.android.maps</varname> 
        dans le répertoire <filename>~/.m2/repository</filename>.</para>
      </section>

      <section id="android-dev-sect-repository-install-remote">
        <title>Installation dans urn depot distant</title>

        <para>Le mécanisme précédent fonctionne très bien pour une seule machine, mais si vous devez fournir ces artefacts à une équipe de développeurs,
        vous voudrez probablement déployer ces mêmes artefacts sur un dépôt distant accessible par l'ensemble des utilisateurs.
	Si vous n'utilisez pas de gestionnaire de dépôt, envisagez l'installation de Nexus avec un utilisateur configuré pour déployer les artefacts sur un dépôt.
	Pour cela, nous vous encourageons à lire les consignes d'installation de Nexus qui sont disponibles gratuitement à cette adresse dans son livre en ligne :
        <ulink url="http://www.sonatype.com/books/nexus-book/reference/install.html">Nexus Installation chapter</ulink>.</para>

        <para>En premier lieu, vous devez renseigner la propriété <varname>repo.url</varname> dans le <varname>pom.xml</varname> 
        de plus haut niveau dans l'arborescence de dossier de l'outil  Android SDK Deployer afin de configurer le dépôt dans lequel vous voulez publier vos artefacts.
	Ensuite, vous devez ajouter un serveur dans les settings Maven dans le fichier <filename>~/.m2/settings.xml</filename>.

	<example>
            <title>Extrait du fichier <varname>settings.xml</varname> qui indique les accès au dépôt et ses données d'authentification</title>

            <programlisting>&lt;settings&gt;
    &lt;servers&gt;
        &lt;server&gt;
            &lt;id&gt;android.repo&lt;/id&gt;
            &lt;username&gt;your username&lt;/username&gt;
            &lt;password&gt;your password&lt;/password&gt;
        &lt;/server&gt;
    &lt;/servers&gt;
&lt;/settings&gt;
</programlisting>
          </example>
	Une fois cette configuration effectuée, vous pouvez déployer vos artefacts en utilisant la commande <command>mvn deploy</command>. 
	Lorsque celle-ci est terminée, vous devriez être capable de retrouver ces artefacts sur votre serveur distant.
        <!-- TODO ??
          For more information about this stuff look at the documentation for the maven-deploy-plugin.
          or better chapter bla in this book.. --></para>
      </section>

      <section id="android-dev-sect-repository-install-parts">
        <title>Installation dune partie des plates-formes</title>

        <para>Par défaut, l'outil Maven Android SDK Deployer est configuré pour installer toutes les versions des artefacts de toutes les plates-formes Android dans un dépôt.
	Si vous désirez n'installer qu'une partie de ces plateformes, voire une seule, vous pouvez utiliser différentes options par l'intermédiaire de <varname>profile</varname>.
	Pour cela, vous devez spécifier les versions que vous désirez par l'intermédiaire de leur nom de <varname>profile</varname> correspondant : 
	<programlisting>mvn install -P 2.1</programlisting>
	Les noms de profiles actuellement disponibles sont : <varname>1.1</varname>, <varname>1.5</varname>,
        <varname>1.6</varname>, <varname>2.0</varname> and
        <varname>2.1</varname>.</para>
      </section>
    </section>

    <section id="android-dev-sect-plugin-config">
      <title>Configurer Maven pour qu'il utilise le Maven Android Plugin</title>

      <para>Afin de pouvoir utiliser les goals du Maven Android Plugin à partir de la ligne de commande en utilisant la version courte du nom du plugin <varname>android</varname>,
      vous devez ajouter l'extrait de configuration suivant dans votre fichier <varname>settings.xml</varname>.</para>

      <example>
        <title>Extrait du <varname>settings.xml</varname> pour pouvoir utiliser le plugin avec son nom court</title>

        <programlisting>&lt;pluginGroups&gt;
   &lt;pluginGroup&gt;
     com.jayway.maven.plugins.android.generation2
   &lt;/pluginGroup&gt;
&lt;/pluginGroups&gt;        </programlisting>
      </example>
    </section>
  </section>

  <section id="android-dev-sect-using">
    <title>Développement d'applications Android avec le Maven Android Plugin</title>

    <section id="android-dev-sect-helloandroidexample">
      <title>Exemple HelloFlashlight</title>

      <para>L'exemple HelloFlashlight va nous servir de point de départ pour présenter le plugin Maven Android Plugin.
      Vous pouvez suivre ces mêmes étapes pour sur applications Android pour qu'elles utilisent le Maven Android Plugin comme outil de build.
      Une fois que votre environnement est correctement configuré (tel que nous venons de le décrire dans les paragraphes précédents),
      créez un nouveau projet Android en utilisant les Android Development Tools (ADT) <uri>http://developer.android.com/sdk/eclipse-adt.html</uri>.</para>

      <para>Pour activer le build Maven d'un tel projet, ajoutez le <varname>pom.xml</varname> ci-dessous dans le dossier principal de votre projet :</para>  

      <example>
        <title><varname>pom.xml</varname> du projet HelloFlashlight</title>

        <programlisting>  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;project xmlns="http://maven.apache.org/POM/4.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                               http://maven.apache.org/maven-v4_0_0.xsd"&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
      &lt;artifactId&gt;helloflashlight&lt;/artifactId&gt;
      &lt;version&gt;0.1-SNAPSHOT&lt;/version&gt;
      &lt;packaging&gt;apk&lt;/packaging&gt;
      &lt;name&gt;HelloFlashlight&lt;/name&gt;

      &lt;dependencies&gt;
          &lt;dependency&gt;
              &lt;groupId&gt;android&lt;/groupId&gt;
              &lt;artifactId&gt;android&lt;/artifactId&gt;
              &lt;version&gt;2.1_r1&lt;/version&gt;
              &lt;scope&gt;provided&lt;/scope&gt;
          &lt;/dependency&gt;
      &lt;/dependencies&gt;

      &lt;build&gt;
          &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
          &lt;plugins&gt;
              &lt;plugin&gt;
                  &lt;groupId&gt;
                    com.jayway.maven.plugins.android.generation2
                  &lt;/groupId&gt;
                  &lt;artifactId&gt;maven-android-plugin&lt;/artifactId&gt;
                  &lt;version&gt;2.2.3-SNAPSHOT&lt;/version&gt;
                  &lt;configuration&gt;
                      &lt;sdk&gt;
                          &lt;platform&gt;2.1&lt;/platform&gt;
                      &lt;/sdk&gt;
                      &lt;deleteConflictingFiles&gt;
                        true
                      &lt;/deleteConflictingFiles&gt;
                  &lt;/configuration&gt;
                  &lt;extensions&gt;true&lt;/extensions&gt;
              &lt;/plugin&gt;
              &lt;plugin&gt;
                  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                  &lt;configuration&gt;
                      &lt;source&gt;1.5&lt;/source&gt;
                      &lt;target&gt;1.5&lt;/target&gt;
                  &lt;/configuration&gt;
              &lt;/plugin&gt;
          &lt;/plugins&gt;
      &lt;/build&gt;
  &lt;/project&gt;
        </programlisting>
      </example>

      <para>Veuillez noter les points suivants dans ce <varname>pom.xml</varname> : <itemizedlist>
          <listitem>
            <para>Le type de <varname>packaging</varname> est
            <varname>apk</varname></para>
          </listitem>

          <listitem>
            <para>la dépendance vers le jar de la plate-forme</para>
          </listitem>

          <listitem>
            <para>la configuration du <varname>build</varname> avec les plugins Maven Android Plugin
            et Compiler Plugin</para>
          </listitem>
        </itemizedlist></para>

      <para>Le type de <varname>packaging</varname> <varname>apk</varname> permet d'activer le cycle de vie spécifique à Android.
      Il prend soin de tous les appels aux outils du SDK Android,  gestion des ressources, conversion du bytecode Java…</para> 

      <para>La dépendance vers le JAR de la plate-forme doit utiliser la version de la cible telle qu'elle a été publiée dans le dépôt Maven par l'Android SDK Deployer.
      Il récupère les versions à partir des valeurs <varname>Platform.Version</varname> et <varname>Pkg.Revision</varname> 
      renseignées dans le fichier de propriétés <varname>source.properties</varname> qui se trouve dans le dossier de la plate-forme du SDK Android.
      Les valeurs possibles sont à ce jour : <varname>1.1_r1</varname>, <varname>1.5_r3</varname>,
      <varname>1.6_r2</varname>, <varname>2.0_r1</varname>,
      <varname>2.0.1_r1</varname> and <varname>2.1_r1</varname>. 
      Naviguez simplement dans votre dépôt pour connaître la liste exacte de ces versions.</para>

      <para>La configuration du plugin Maven Compiler dans le <varname>build</varname> est nécessaire 
      car Android utilise les fonctionnalités de Java 5 telles que les annotations ou les boucles simplifiées.
      La configuration principale du plugin Maven Android est également effectuée dans cette section <varname>build</varname>.
      Dans la majorité des cas, peu de configuration est nécessaire.</para>
      

      <para>Pour construire l'application et l'exécuter sur un émulateur déjà lancé, vous pouvez utiliser la commande 
      <programlisting>mvn clean install android:deploy</programlisting>.<!--TODO potentially add commandline output for build here-->
      Le code de l'application d'exemple est disponible dans les <varname>maven-android-plugin-samples</varname> à cette adresse :
      <uri>http://code.google.com/p/maven-android-plugin/wiki/Samples</uri>.</para>
    </section>

    <section id="android-dev-sect-test">
      <title>Test du code d'une application Android</title>

      <para>Le test du code d'une application Android peut-être effectué à la manière d'un test unitaire traditionnel <varname>junit</varname> dans le cadre de l'Android SDk,
      mais aussi par l'intermédiaire de tests d'intégration. Ces derniers sont appelés 'instrumentation tests'.</para>

      <section id="android-dev-sect-test-unit">
        <title>Tests unitaires</title>

        <para>Le plugin Android Maven lance l'exécution des tests unitaires à la manière du plugin Surefire.
        Comme le chemin par défaut des classes de tests dans Eclipse et dans l'Android Development Toolkit est <varname>test</varname>,
	Maven doit être configuré spécifiquement pour qu'il puisse accéder à ce code. <example>
            <title>Ajout d'un dossier <varname>test</varname> dans la configuration <varname>build</varname></title>

            <programlisting>&lt;build&gt;
  &lt;testSourceDirectory&gt;test&lt;/testSourceDirectory&gt;
  ...          </programlisting>
          </example>
	D'une autre manière, il vous est également possible de suivre les conventions Maven et de déplacer le code de votre application et de vos tests dans les répertoires
	<varname>src/main/java</varname> et <varname>src/test/java</varname> et de réconfigurer Eclipse pour qu'il suive ce pattern.</para>
      </section>

      <section id="android-dev-sect-test-instrumentation">
        <title>Test d'instrumentation</title>

        <para>Les tests d'instrumentation sont des tests d'intégration packagés dans une application qui est lancée dans un émulateur ou un téléphone
	et qui interagit avec une autre application pour tester son comportement.
	La configuration standard pour exécuter les ces tests d'instrumentation est d'avoir deux projets distincts :
	l'un pour l'application, l'autre pour les tests d'intrumentation.
	Ces modules sont liés par l'intermédiaire des balises <varname>module</varname> du pom parent.</para>

        <para>Le code du Maven Android Plugin Samples contient deux exemples de projets configurés de cette manière.
	La configuration du plugin Maven Android pour l'application contenant les tests d'instrumentation 
	est la même que pour celle de l'application principale avec une seule différence : l'ajout d'une dépendance vers l'application principale.
	Il est important d'ajouter le <varname>type</varname> de l'<varname>apk</varname> sur cette dépendance pour permettre au plugin Maven Android de trouver le package de l'application.
        <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
  &lt;artifactId&gt;intents&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
  &lt;type&gt;apk&lt;/type&gt;
&lt;/dependency&gt;
</programlisting></para>
      </section>
    </section>

    <section id="android-dev-sect-maps">
      <title>Using Add Ons like the Google Maps Extension</title>

      <para>

For many applications the normal Android SDK artifact (android.jar) will be sufficient, 
however some applications require add-ons. 
One of the more commonly used add-ons is the Google Maps add-on which provides access to the Google Maps API. 
The Maps add-on is deployed to your Maven repository by the Maven Android SDK Deployer tool. 
In order to access the API in your application you need to add a dependency to the add-on to your pom.xml like this:</para>

      <example>
        <title>The dependency to the Google Maps API</title>

        <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.google.android.maps&lt;/groupId&gt;
  &lt;artifactId&gt;maps&lt;/artifactId&gt;
  &lt;version&gt;7_r1&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;      </programlisting>
      </example>

      <para>The valid versions currently are <varname>3_r3</varname>,
      <varname>4_r2</varname>, <varname>5_r1</varname>,
      <varname>6_r1</varname> and <varname>7_r1</varname>. 
Simply browse the android folder of your maven repository/repository server to see what the versions are.</para>
    </section>

    <section id="android-dev-sect-multimodule">
      <title>Multi Module Maven Android Projects</title>

      <para>

The Maven Android Plugin can be used in a multi-module project setup. An example setup would be 3 different modules linked via a parent pom.</para>

      <variablelist>
        <varlistentry>
          <term>Java Library Code</term>

          <listitem>
            <para>

This first module could contain any business logic implemented in Java, or any other JVM based language actually, in a jar package.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Android Application Code</term>

          <listitem>
            <para>

This second module would depend on the first module and consist of all the interface code for the Android platform. 
It would need to use apk packaging and the Maven Android Plugin.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Instrumentation Test</term>

          <listitem>
            <para>

This third module would depend on the second module and implement the integration test of the application.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>

Together with the use of other module to separate items it is possible to set up a multi module build 
for an Android application as well as a server side web application sharing 
e.g. the code for the core objects and business logic.</para>
    </section>

    <section id="android-dev-sect-dependencies">
      <title>Using external dependencies</title>

      <para>

When using the Maven Android plugin there are three types of dependencies that are treated differently.</para>

      <variablelist>
        <varlistentry>
          <term>Regular dependencies to other Java libraries</term>

          <listitem>
            <para>

The Java byte code files (.class) of library dependencies as denoted in the normal Maven way 
are transformed to dalvik executable format like any source code of the current project and included in the Android package. 
All other files are included as contained in the source library. An example would look like this
            <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility&lt;/groupId&gt;
  &lt;artifactId&gt;model&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
&lt;/dependency&gt;
</programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Dependencies to other Android projects</term>

          <listitem>
            <para>

Other Maven Android projects with packaging type apk declared as dependencies are deployed to the emulator 
prior to running the instrumentation tests in the integration test phase.
            <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
  &lt;artifactId&gt;intents&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
  &lt;type&gt;apk&lt;/type&gt;
&lt;/dependency&gt;
</programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Dependencies to other Android projects sources</term>

          <listitem>
            <para>

Other Maven Android projects with packaging type apk declared as source dependencies are pulled into the current
Android application with assets and resources and used to build an application combining all artifacts.. <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
  &lt;artifactId&gt;tools&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
  &lt;type&gt;apksources&lt;/type&gt;
&lt;/dependency&gt;
</programlisting> More details can be found at
            <uri>http://code.google.com/p/maven-android-plugin/wiki/ApkSourcesDependency</uri>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <!--TODO To we want these sections? -->

    <!--<section id="android-dev-sect-eclipse">-->

    <!--<title>Using the plugin with Eclipse</title>-->

    <!--<para>document what needs to be done, maybe install m2eclipse, more details on the wiki and need to play around with it-->

    <!--same applies for motodev studio, http://code.google.com/p/maven-android-plugin/wiki/EclipseIntegration</para>-->

    <!--</section>-->

    <!--<section id="android-dev-sect-intellij">-->

    <!--<title>Using the plugin with IntelliJ IDEA</title>-->

    <!--<para>need to play around with it</para>-->

    <!--</section>-->
  </section>

  <section id="android-dev-sect-custom-details">
    <title>Maven Android Plugin Details</title>

    <section id="android-dev-sect-custom-lifecycle">
      <title>Maven Android Plugin Lifecycle</title>

      <para><indexterm>
          <primary>Maven Android Plugin</primary>

          <secondary>lifecycle</secondary>
        </indexterm>The Android Maven plugin customizes the lifecycle based on
      the packaging. If your project has a <varname>packaging</varname> of
      type<varname>apk</varname> the Android plugin will execute a customized
      lifecycle.</para>

      <para>The customised life cycle has the following additional executions
      in the default lifecycle.</para>

      <variablelist>
        <varlistentry>
          <term>generate-sources Phase</term>

          <listitem>
            <para>Use the Android Asset Packaging Tool
            (<varname>aapt</varname>) of the platform version specified in the
            pom to package the Android specific resources like
            <varname>AndroidManifest.xml</varname>, assets and
            resources.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>process-classes Phase</term>

          <listitem>
            <para>Run the <varname>dx</varname> tool of the platform version
            specified in the pom to convert all classes (libraries, resources
            and project code) into davlik executable format.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>package Phase</term>

          <listitem>
            <para>Run the Android Package tool (<varname>apk</varname>) of the
            Android SDK to create and sign the Android package file (apk) for
            installation on the emulator or device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>pre-integration-test Phase</term>

          <listitem>
            <para>Deploy the currently built Android application package (apk)
            as well as any other dependencies with
            <varname>packaging</varname> type <varname>apk</varname> to the
            emulator/device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>integration-test Phase</term>

          <listitem>
            <para>Run the instrumentation test classes against the deployed
            application.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="android-dev-sect-goals">
      <title>Maven Android Plugin Goals</title>

      <para><indexterm>
          <primary>Maven Android</primary>

          <secondary>plugin goals</secondary>
        </indexterm> The Maven Android Plugin contains the following
      goals:</para>

      <variablelist>
        <varlistentry>
          <term>android:apk</term>

          <listitem>
            <para>

The <varname>apk</varname> goal creates the android package (apk) file. 
By default the plugin signs the file with the debug keystore. 
The configuration parameter <programlisting>&lt;sign&gt;&lt;debug&gt;false&lt;debug&gt;&lt;sign&gt;
</programlisting> can be used to disable the signing process.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:deploy</term>

          <listitem>
            <para>

The <varname>deploy</varname> goal deploys the built apk file, or another specified apk, to a connected device or emulator.
This goal is automatically performed when running through the <varname>integration-test</varname> lifecycle phase on a project
with instrumentation tests (e.g. <command>mvn install</command> or
            <command>mvn integration-test</command>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:deploy-dependencies</term>

          <listitem>
            <para>

The <varname>deploy-dependencies</varname> goal deploys all directly declared dependencies of
            <varname>&lt;type&gt;apk&lt;/type&gt;</varname> in this project.
This goal is usually used in a project with instrumentation tests, 
to deploy the apk to test onto the device before running the deploying and running the instrumentation tests apk. 
The goal is automatically performed when running through the integration-test life cycle phase on a project with instrumentation tests (e.g.
            <command>mvn install</command> or <command>mvn
            integration-test</command>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:dex</term>

          <listitem>
            <para>The <varname>dex</varname> goal converts compiled Java classes to the Android Dalivk Executable (dex) format.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:emulator-start</term>

          <listitem>
            <para>

The <varname>emulator-start</varname> goal starts the Android device emulator. 
The start up parameters can be configured in the Maven Android Plugin configuration in the pom.xml file
            <programlisting>&lt;configuration&gt;
  ...
  &lt;emulator&gt;
    &lt;avd&gt;21&lt;/avd&gt;
    &lt;wait&gt;6000&lt;/wait&gt;
    &lt;options&gt;-no-skin&lt;/options&gt;
  &lt;/emulator&gt;
  ...
&lt;/configuration&gt;               </programlisting> or via command line
            parameters outside an actual project. <programlisting>mvn android:emulator-start \
    -Dandroid.emulator.avd=Default \
    -Dandroid.emulator.options=-no-skin \
    -Dandroid.emulator.wait=10000              </programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:emulator-stop</term>

          <listitem>
            <para>

The <varname>emulator-stops</varname> stops the Android device emulator and can be used inside or outside a Maven project folder.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:generate-sources</term>

          <listitem>
            <para>
The <varname>generate-sources</varname> goal generates <varname>R.java</varname> based on the resources specified by the resources configuration parameter. 
It generates Java files based on aidl files.</para>

            <para>

If the configuration parameter <varname>deleteConflictingFiles</varname> is true (which it is by default), 
this goal has also deletes any R.java files found in the  source directory, deletes any .java files with the same name as an
.aidl file found in the source directory and deletes any Thumbs.db files found in the resource directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:instrument</term>

          <listitem>
            <para>The <varname>instrument</varname> goal runs the
            instrumentation android package on the device/emulator.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:internal-integration-test</term>

          <listitem>
            <para>

The <varname>internal-integration-test</varname> goal is called automatically when the lifecycle reaches the <varname>integration-test</varname> phase. 
It determines whether to call the goal instrument in this phase based on the existence of instrumentation test classes in the current project. 
The goal is internal to the plugin lifecycle and should not be used as separate invocation on the command line.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:internal-pre-integration-test</term>

          <listitem>
            <para>

The <varname>internal-pre-integration-test</varname> goal is called automatically when the lifecycle reaches <varname>pre-integration-test</varname> phase. 
It determines whether to call the goals <varname>android:deploy-dependencies</varname> and <varname>android:deploy</varname> in this phase 
and if necessary invokes them. 
The goal is internal to the plugin lifecycle and should not be used as separate invocation on the command line.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:pull</term>

          <listitem>
            <para>The pull goal can be used to copy files or directories from the device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:push</term>

          <listitem>
            <para>The pull goal can be used to copy files or directories to the device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:undeploy</term>

          <listitem>
            <para>The undeploy goal removes the apk of the current project, or another specified apk, from the connected device.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</chapter>
