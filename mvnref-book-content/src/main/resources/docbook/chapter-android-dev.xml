<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="android-dev" lang="fr">
  <title>Développement d'applications Android avec Maven</title>

  <section id="android-dev-sect-intro">
    <title>Introduction</title>

    <para>Android est un téléphone portable et un système d'exploitation embarqué développé par 
    l'Open Handset Alliance. Il se base sur un noyau Linux et possède une machine virtuelle gérant la
    mémoire du code des applications et interprétant du bytecode Java pour produire le code qui sera exécuté.
    L'environnement de développement est basé sur le langage Java et les outils du JDK et de la JVM.
    Le bytecode Java produit est transformé en code exécutable Dalvik, optimisé pour répondre aux
    contraintes liées aux enjeux de la mobilité. Java est le langage de programmation par défaut,
    les différentes API sont basées sur celui-ci.</para>

    <para>Dans la plupart des cas, le développement d'applications Android s'effectue avec 
    l'Android Development Toolkit (<acronym>ADT</acronym>) dans Eclipse. Il est également
    possible de construire les applications en dehors de cet IDE en utilisant Apache Ant.
    Le plugin Maven Android a été créé pour permettre aux équipes de développement de construire,
    déployer et publier des applications Android avec Apache Maven, permettant ainsi de tirer parti
    des fonctionnalités disponibles comme la gestion des dépendances, les raports ou l'analyse de 
    code, etc.</para>
  </section>

  <section id="android-dev-sect-config-build">
    <title>Configurer un environnement pour le développement Android</title>

    <para><indexterm>
        <primary>Android</primary>
        <secondary>configurer un environnement de build</secondary>
      </indexterm>Avant d'essayer de construire vos bibliothèques et vos applications Maven,
      vous devez effectuer les tâches suivantes :</para>

    <itemizedlist>
      <listitem>
        <para>Installation du SDK Android</para>
      </listitem>

      <listitem>
        <para>Installation des jars de l'API Android dans un dépôt local ou distant</para>
      </listitem>

      <listitem>
        <para>Configuration de Maven pour simplifier l'utilisation du plugin Maven Android</para>
      </listitem>
    </itemizedlist>

    <section id="android-dev-sect-sdk-install">
      <title>Installation du SDK Android</title>

      <para>Le plugin Android Maven nécessite la présence du SDK Android dans votre environnement 
      de développement. La variable d'environnement <varname>ANDROID_HOME</varname> doit être
      configurée pour pointer vers le répertoire d'installation du SDK Android. Le SDK doit être
      installé en suivant les consignes du site web Android Developer dont voici l'adresse
      <uri>http://developer.android.com/sdk/index.html</uri>. Par exemple, si le SDK est installé
      dans le répertoire <varname>/opt/android-sdk-linux</varname>, la commande suivante permet
      d'initialiser cette variable correctement 
      <programlisting>export ANDROID_HOME=/opt/android-sdk-linux</programlisting> sur un environnement
      Unix/bash. Sous Windows, utiliser la commande suivante :
      <programlisting>set ANDROID_HOME=C:\\opt\android-sdk-linux</programlisting>.</para>

      <para>En plus du SDK, les différentes versions des plates-formes dont vous avez besoin pour le 
      développement doivent également être installées. Les consignes d'installation sont détaillées
      à cette adresse : <uri>http://developer.android.com/sdk/adding-components.html</uri>. Vous
      pouvez installer les versions des plates-formes dont vous avez besoin, ou, plus simplement, 
      vous contenter d'installer toutes les plates-formes. De plus, vous pouvez également ajouter
      le répertoire <varname>ANDROID_HOME/tools</varname> à votre <varname>PATH</varname> pour
      faciliter l'utilisation en ligne de commande des différents outils fournis par le SDK.</para>
    </section>

    <section id="android-dev-sect-repository-install">
      <title>Installation des artefacts Android dans un dépôt Maven</title>

      <para>Une fois que le SDK est installé, vous devez mettre à disposition de Maven les différents
      fichiers <acronym>JAR</acronym>s des <acronym>API</acronym>s. L'outil Maven Android SDK
      Deployer vous permet d'effectuer cette tâche en déployant ces JARs soit dans votre dépôt local,
      soit sur un dépôt distant.
<!-- TODO link to nexus... in general how much do we have
        to explain here about this stuff, i would prefer to add links to the nexus book chapters somehow.. --></para>

      <para>Cet outil, le Maven Android SDK Deployer, est disponible à cette adresse :</para>
      <para><uri>http://github.com/mosabua/maven-android-sdk-deployer</uri></para>
      <para>Cliquez simplement sur le bouton <varname>Download Source</varname> et dézippez
      l'archive téléchargée dans le dossier de votre choix. Cette opération va créer un répertoire
      dont le nom suit le format <varname>mosabua-maven-android-sdk-deployer-XXX</varname>  où
      <varname>XXX</varname> désigne un numéro de révision du type <varname>df824df</varname>.
      Déplacez-vous ensuite dans ce nouveau répertoire :
      <programlisting>cd mosabua-maven-android-sdk-deployer-df824df</programlisting></para>

      <section id="android-dev-sect-repository-install-local">
        <title>Installation dans votre dépôt local</title>

        <para>Pour installer les fichiers JARs des APIs des différentes versions de plates-forme
        dans votre dépôt local, vous pouvez exécuter la commande suivante à partir du répertoire
        <filename>deployer</filename> :
        <programlisting>mvn clean install</programlisting>
        Par défaut, cette commande installe les fichiers JARs <varname>android.jar</varname> et
        <varname>maps.jar</varname> dans votre dépôt local.	Vous devriez donc trouver ces fichiers
        fraichement installés dans les avec pour groupe <varname>android</varname> et
        <varname>com.google.android.maps</varname> dans le répertoire
        <filename>~/.m2/repository</filename>.</para>
      </section>

      <section id="android-dev-sect-repository-install-remote">
        <title>Installation dans un dépôt distant</title>

        <para>Le mécanisme précédent fonctionne très bien pour une seule machine, mais si vous devez
        fournir ces artefacts à une équipe de développeurs, vous voudrez probablement déployer ces
        mêmes artefacts sur un dépôt distant accessible à l'ensemble des utilisateurs. Si vous
        n'utilisez pas de gestionnaire de dépôt, vous devriez envisager l'installation de Nexus,
        configuré avec un utilisateur pouvant déployer des artefacts. Pour cela, nous vous
        encourageons à vous reporter aux consignes d'installation de Nexus dans le livre gratuit et
        en ligne qui lui est consacré à cette adresse : <ulink
        url="http://www.sonatype.com/books/nexus-book/reference/install.html">Nexus Installation</ulink>.</para>

        <para>En premier lieu, vous devez renseigner la propriété <varname>repo.url</varname> dans 
        le <varname>pom.xml</varname> de plus haut niveau dans l'arborescence de répertoires de
        l'outil Android SDK Deployer pour indiquer le dépôt sur lequel vous voulez publier vos
        artefacts. Ensuite, vous devez ajouter ce serveur dans le fichier de configuration Maven
        <filename>~/.m2/settings.xml</filename>. <example>
            <title>Extrait du fichier <varname>settings.xml</varname> configurant l'accès au dépôt</title>

            <programlisting>&lt;settings&gt;
    &lt;servers&gt;
        &lt;server&gt;
            &lt;id&gt;android.repo&lt;/id&gt;
            &lt;username&gt;your username&lt;/username&gt;
            &lt;password&gt;your password&lt;/password&gt;
        &lt;/server&gt;
    &lt;/servers&gt;
&lt;/settings&gt;
</programlisting>
          </example>Une fois cette configuration effectuée, vous pouvez déployer les artefacts en
          utilisant la commande <command>mvn deploy</command>. Lorsque celle-ci est terminée, vous
          devriez retrouver ces artefacts sur votre serveur distant.
        <!-- TODO ??
          For more information about this stuff look at the documentation for the maven-deploy-plugin.
          or better chapter bla in this book.. --></para>
      </section>

      <section id="android-dev-sect-repository-install-parts">
        <title>Installation d'une partie des plates-formes</title>

        <para>Par défaut, l'outil Maven Android SDK Deployer est configuré pour installer toutes 
        les versions des artefacts de l'ensemble des plates-formes Android dans le dépôt. Si vous
        désirez n'installer qu'une partie de ces plates-formes, voire une seule, vous pouvez 
        utiliser différentes options par l'intermédiaire de <varname>profile</varname>. Pour cela,
        vous devez spécifier les versions que vous désirez par l'intermédiaire du nom de
        <varname>profile</varname> correspondant :
        <programlisting>mvn install -P 2.1</programlisting>
        Les noms de profiles actuellement disponibles sont : <varname>1.1</varname>,
        <varname>1.5</varname>, <varname>1.6</varname>, <varname>2.0</varname> et
        <varname>2.1</varname>.</para>
      </section>
    </section>

    <section id="android-dev-sect-plugin-config">
      <title>Configurer Maven pour l'utilisation du plugin Maven Android</title>

      <para>Afin de pouvoir appeler les goals du plugin Maven Android via la ligne de commande et
      en utilisant la version courte du nom du plugin <varname>android</varname>, vous devez
      ajouter l'extrait de configuration suivant dans votre fichier <varname>settings.xml</varname>.</para>

      <example>
        <title>Extrait du fichier <varname>settings.xml</varname> pour appeler le plugin par son nom court</title>

        <programlisting>&lt;pluginGroups&gt;
   &lt;pluginGroup&gt;
     com.jayway.maven.plugins.android.generation2
   &lt;/pluginGroup&gt;
&lt;/pluginGroups&gt;        </programlisting>
      </example>
    </section>
  </section>

  <section id="android-dev-sect-using">
    <title>Développement d'applications Android avec le plugin Maven Android</title>

    <section id="android-dev-sect-helloandroidexample">
      <title>Exemple HelloFlashlight</title>

      <para>L'exemple HelloFlashlight va nous servir de point de départ pour présenter le
      plugin Maven Android. Vous pouvez suivre les mêmes étapes pour utiliser le plugin Maven
      Android Plugin afin de construire vos applications Android. Une fois que votre environnement
      est correctement configuré (tel que nous venons de le décrire dans les paragraphes précédents),
      créez un nouveau projet Android en utilisant les Android Development Tools
      (<acronym>ADT</acronym>) <uri>http://developer.android.com/sdk/eclipse-adt.html</uri>.</para>

      <para>Pour activer le build Maven d'un tel projet, ajoutez le fichier <filename>pom.xml</filename>
      ci-dessous dans le dossier principal de votre projet :</para>

      <example>
        <title>Fichier <filename>pom.xml</filename> du projet HelloFlashlight</title>

        <programlisting>  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;project xmlns="http://maven.apache.org/POM/4.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                               http://maven.apache.org/maven-v4_0_0.xsd"&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
      &lt;artifactId&gt;helloflashlight&lt;/artifactId&gt;
      &lt;version&gt;0.1-SNAPSHOT&lt;/version&gt;
      &lt;packaging&gt;apk&lt;/packaging&gt;
      &lt;name&gt;HelloFlashlight&lt;/name&gt;

      &lt;dependencies&gt;
          &lt;dependency&gt;
              &lt;groupId&gt;android&lt;/groupId&gt;
              &lt;artifactId&gt;android&lt;/artifactId&gt;
              &lt;version&gt;2.1_r1&lt;/version&gt;
              &lt;scope&gt;provided&lt;/scope&gt;
          &lt;/dependency&gt;
      &lt;/dependencies&gt;

      &lt;build&gt;
          &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
          &lt;plugins&gt;
              &lt;plugin&gt;
                  &lt;groupId&gt;
                    com.jayway.maven.plugins.android.generation2
                  &lt;/groupId&gt;
                  &lt;artifactId&gt;maven-android-plugin&lt;/artifactId&gt;
                  &lt;version&gt;2.2.3-SNAPSHOT&lt;/version&gt;
                  &lt;configuration&gt;
                      &lt;sdk&gt;
                          &lt;platform&gt;2.1&lt;/platform&gt;
                      &lt;/sdk&gt;
                      &lt;deleteConflictingFiles&gt;
                        true
                      &lt;/deleteConflictingFiles&gt;
                  &lt;/configuration&gt;
                  &lt;extensions&gt;true&lt;/extensions&gt;
              &lt;/plugin&gt;
              &lt;plugin&gt;
                  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                  &lt;configuration&gt;
                      &lt;source&gt;1.5&lt;/source&gt;
                      &lt;target&gt;1.5&lt;/target&gt;
                  &lt;/configuration&gt;
              &lt;/plugin&gt;
          &lt;/plugins&gt;
      &lt;/build&gt;
  &lt;/project&gt;
        </programlisting>
      </example>

      <para>Veuillez noter les points suivants dans ce fichier <filename>pom.xml</filename> :
      <itemizedlist>
          <listitem>
            <para>Le type de <varname>packaging</varname> est <varname>apk</varname></para>
          </listitem>

          <listitem>
            <para>la dépendance vers le jar de la plate-forme Android cible</para>
          </listitem>

          <listitem>
            <para>la configuration du <varname>build</varname> avec les plugins Maven Android 
            et Compiler</para>
          </listitem>
        </itemizedlist></para>

      <para>Le type de <varname>packaging</varname> <varname>apk</varname> permet d'activer le 
      cycle de vie spécifique à Android. Il gère tous les appels aux outils du SDK Android pour
      traiter les ressources, convertir le bytecode Java, etc.</para>

      <para>La dépendance vers le JAR de la plate-forme doit utiliser la version de la cible telle 
      qu'elle a été publiée dans le dépôt Maven par l'Android SDK Deployer. Il récupère les
      versions à partir des valeurs <varname>Platform.Version</varname> et <varname>Pkg.Revision</varname>
      renseignées dans le fichier de propriétés <varname>source.properties</varname> qui se trouve 
      dans le dossier de la plate-forme du SDK Android.  Les valeurs possibles sont à ce jour :
      <varname>1.1_r1</varname>, <varname>1.5_r3</varname>,
      <varname>1.6_r2</varname>, <varname>2.0_r1</varname>,
      <varname>2.0.1_r1</varname> et <varname>2.1_r1</varname>.
      Naviguez simplement dans votre dépôt pour connaître la liste exacte de ces versions.</para>

      <para>La configuration du plugin Maven Compiler dans la balise <sgmltag>build</sgmltag> est 
      nécessaire car Android utilise les fonctionnalités de Java 5 comme les annotations ou les
      boucles simplifiées. La configuration principale du plugin Maven Android est également
      effectuée dans la section <sgmltag>build</sgmltag> du fichier <filename>pom.xml</filename>,
      mais dans la plupart des cas, très peu de configuration est nécessaire.</para>
      

      <para>Pour construire l'application et l'exécuter dans un émulateur déjà lancé, vous pouvez
      utiliser la commande <programlisting>mvn clean install android:deploy</programlisting>
      <!--TODO potentially add commandline output for build here-->
      Le code de l'application d'exemple est disponible dans les 
      <varname>maven-android-plugin-samples</varname> que vous trouverez à cette adresse :
      <uri>http://code.google.com/p/maven-android-plugin/wiki/Samples</uri>.</para>
    </section>

    <section id="android-dev-sect-test">
      <title>Tester le code d'une application Android</title>

      <para>Tester une application Android peut se faire sous la forme de tests unitaires
      traditionnels, en profitant de l'excellent support de <varname>junit</varname> par l'Android
      SDK, mais aussi par l'intermédiaire de tests d'intégration que l'on appelle
      <varname>tests d'instrumentation</varname>.</para>

      <section id="android-dev-sect-test-unit">
        <title>Tests unitaires</title>

        <para>Le plugin Android Maven exécute les tests unitaires à la manière du plugin Surefire.
        Comme le chemin par défaut des classes de tests dans Eclipse, et donc par conséquence dans
        l'Android Development Toolkit, est <filename>test</filename>, Maven doit être configuré
        spécifiquement pour prendre ce code en compte lors du build. <example>
            <title>Ajout du dossier <filename>test</filename> dans la section <sgmltag>build</sgmltag></title>

            <programlisting>&lt;build&gt;
  &lt;testSourceDirectory&gt;test&lt;/testSourceDirectory&gt;
  ...          </programlisting>
        </example>
        Cependant, vous pouvez respecter les conventions Maven et déplacer le code de votre application
        et de vos tests dans les répertoires <filename>src/main/java</filename> et
        <filename>src/test/java</filename> et réconfigurer Eclipse pour qu'il suive ce
        formalisme.</para>
      </section>

      <section id="android-dev-sect-test-instrumentation">
        <title>Tests d'instrumentation</title>

        <para>Les tests d'instrumentation sont des tests d'intégration packagés dans une application 
        qui est lancée dans un émulateur ou un téléphone et qui interagit l'application dont on veut
        tester le comportement.	La configuration standard pour exécuter les tests d'instrumentation 
        est d'avoir deux projets distincts : un pour l'application, et un autre pour les tests 
        d'instrumentation. Ces modules sont liés par l'intermédiaire des balises
        <sgmltag>module</sgmltag> du POM parent.</para>

        <para>Le code du Maven Android Plugin Samples contient deux exemples de projets configurés 
        de cette manière. La configuration du plugin Maven Android pour l'application contenant
        les tests d'instrumentation est la même que celle de l'application principale à une
        différence près : l'ajout d'une dépendance vers l'application principale. Il est important
        d'ajouter le <sgmltag>type</sgmltag> <varname>apk</varname> sur cette dépendance pour
        permettre au plugin Maven Android de trouver le package Android de l'application.
        <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
  &lt;artifactId&gt;intents&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
  &lt;type&gt;apk&lt;/type&gt;
&lt;/dependency&gt;
</programlisting></para>
      </section>
    </section>

    <section id="android-dev-sect-maps">
      <title>Utiliser des Add Ons comme l'extension Google Maps</title>

      <para>Pour la majorité des applications, l'artefact du SDK (<filename>android.jar</filename>)
      suffit, il arrive pourtant que certaines applications nécessitent des Add Ons.
      L'un des Add-Ons les plus connus est celui de Google Maps, celui-ci permet l'accès à l'API Google Maps.
      Cet Add-On a été déployé dans votre dépôt Maven par l'outil Maven Android SDK Deployer.
      Afin de pouvoir utiliser cette API, vous avez besoin d'ajouter une dépendance à votre application, pour cela modifiez le <varname>pom.xml</varname> de la manière suivante :</para>
	    
      <example>
        <title>La dépendance vers l'API Google Maps</title>

        <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.google.android.maps&lt;/groupId&gt;
  &lt;artifactId&gt;maps&lt;/artifactId&gt;
  &lt;version&gt;7_r1&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;      </programlisting>
      </example>

      <para>Les versions suivantes sont pour le moment disponibles  <varname>3_r3</varname>,
      <varname>4_r2</varname>, <varname>5_r1</varname>,
      <varname>6_r1</varname> and <varname>7_r1</varname>. 
      Naviguez simplement dans le dossier android de dépôt pour consulter la liste des versions qui vous est disponible.</para>
    </section>

    <section id="android-dev-sect-multimodule">
      <title>Projets Maven Android multi projets</title>

      <para>Le plugin Maven Android peut être utilisé pour configurer un projet multimodule, comme par exemple ici, 3 modules liés à un même parent.</para>

      <variablelist>
        <varlistentry>
          <term>Bibliothèque de code Java</term>

          <listitem>
            <para>Ce premier module contient la logique business implémentée en Java, ou tout autre langage tournant sur la JVM, dans un jar.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Code de l'application Android</term>

          <listitem>
            <para>Ce second module dépend du premier, il contient le code dépendant de la plateforme Android. 
	    Ce module doit être du type <varname>APK</varname> et avoir configuré le plugin Android.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Tests d'instrumentation</term>

          <listitem>
            <para>Ce troisième module dépend du second module, il implémente les différents tests d'intégration de l'application.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Il est possible de construire ces différents modules en même temps par l'intermédiaire d'un build multimodule.
      Cela permet, par exemple, de partager du code entre une application Android et une application Web des objets du modèle ou de la logique business.</para> 
    </section>

    <section id="android-dev-sect-dependencies">
      <title>Utilisation de dépendances externes</title>

      <para>Lorsque vous utilisez le plugin Maven Android, trois types de dépendances sont pris en compte.</para>

      <variablelist>
        <varlistentry>
          <term>Dépendances vers d'autres bibliothèques Java libraries</term>

          <listitem>
            <para>Les fichiers contenant le byte code Java (.class) des dépendances des bibliothèques sont transformés en code exécutable Dalvik comme tout autre code source du projet courant, 
	    ils sont ensuite inclus dans le package Android.
	    Tous les autres fichiers sont inclus en tant que ressource dans la bibliothèque source.
            Voici un morceau d'exemple : <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility&lt;/groupId&gt;
  &lt;artifactId&gt;model&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
&lt;/dependency&gt;
</programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Dépendances vers d'autres projets Android</term>

          <listitem>
            <para>Tout autre projet Android avec un type de packaging APK déclaré comme dépendance d'un projet Android est déployé dans l'émulateur 
            avant l'exécution des tests d'instrumentation durant la phase des tests d'intégration.
	    <programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
  &lt;artifactId&gt;intents&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
  &lt;type&gt;apk&lt;/type&gt;
&lt;/dependency&gt;
</programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Dépendances vers d'autres sources de projets Android</term>

          <listitem>
            <para>Tout autre projet Android avec un type de packaging APK déclaré comme dépendance de source est poussé dans l'application courante avec leurs assets et ressources.
	    Tout ce contenu sera ensuite utilisé pour construire une application combinant tous ces artefacts.<programlisting>&lt;dependency&gt;
  &lt;groupId&gt;com.simpligility.android&lt;/groupId&gt;
  &lt;artifactId&gt;tools&lt;/artifactId&gt;
  &lt;version&gt;0.1&lt;/version&gt;
  &lt;type&gt;apksources&lt;/type&gt;
&lt;/dependency&gt;
</programlisting> Pour plus de détail sur cette solution, consultez l'adresse suivante :
            <uri>http://code.google.com/p/maven-android-plugin/wiki/ApkSourcesDependency</uri>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <!--TODO To we want these sections? -->

    <!--<section id="android-dev-sect-eclipse">-->

    <!--<title>Using the plugin with Eclipse</title>-->

    <!--<para>document what needs to be done, maybe install m2eclipse, more details on the wiki and need to play around with it-->

    <!--same applies for motodev studio, http://code.google.com/p/maven-android-plugin/wiki/EclipseIntegration</para>-->

    <!--</section>-->

    <!--<section id="android-dev-sect-intellij">-->

    <!--<title>Using the plugin with IntelliJ IDEA</title>-->

    <!--<para>need to play around with it</para>-->

    <!--</section>-->
  </section>

  <section id="android-dev-sect-custom-details">
    <title>Plugin Maven Android en détails</title>

    <section id="android-dev-sect-custom-lifecycle">
      <title>Cycle de vie du plugin Maven Android</title>

      <para><indexterm>
          <primary>Plugin Maven Android</primary>

          <secondary>cycle de vie</secondary>
        </indexterm>Le plugin Maven Android personnalise le cycle de vie en fonction du type de packaging.
	Si votre projet est du type APK, le plugin Maven Android exécutera son cycle de vie spécifique.</para>

      <para>Voici la description des différentes phases de ce cycle de vie personnalisé.</para>

      <variablelist>
        <varlistentry>
          <term>Phase generate-sources</term>

          <listitem>
            <para>Utilise l'Android Asset Packaging Tool (<varname>aapt</varname>) de la plateforme spécifiée dans le pom pour packager certaines ressources comme le fichier 
            <varname>AndroidManifest.xml</varname>, les assets et  les ressources.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Phase process-classes</term>

          <listitem>
            <para>Exécute l'outil <varname>dx</varname> de la plateforme spécifiée dans le pom pour convertir toutes les classes 
	    (bibliothèques, ressources et code du projet) en code exécutable au format Dalvik.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Phase package</term>

          <listitem>
            <para>Exécute l'outil de packaging Android (<varname>apk</varname>) du SDK pour créer et signer le package APK pour qu'il puisse être installé sur un émulateur ou un téléphone.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Phase pre-integration-test</term>

          <listitem>
            <para>Déploie le package de l'application Android (APK) comme n'importe quelle dépendance du type de packaging APK sur l'émulateur ou le téléphone.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Phase integration-test</term>

          <listitem>
            <para>Exécute les classes de test d'instrumentation pour tester l'application déployée.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="android-dev-sect-goals">
      <title>Goals du plugin Maven Android</title>

      <para><indexterm>
          <primary>Maven Android</primary>

          <secondary>goals de plugin</secondary>
        </indexterm> Le plugin Maven Android contient les goals suivants :</para>

      <variablelist>
        <varlistentry>
          <term>android:apk</term>

          <listitem>
            <para>Le goal <varname>apk</varname> lance la création du package android (apk).
	    Par défaut, le plugin signe le fichier en utilisant le keystore de debug.
	    Le paramètre <programlisting>&lt;sign&gt;&lt;debug&gt;false&lt;debug&gt;&lt;sign&gt;</programlisting> peut 
	    être configuré pour désactiver ce mécanisme.</para> 
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:deploy</term>

          <listitem>
            <para>Le goal <varname>deploy</varname> lance le déploiement d'un fichier APK vers un émulateur ou un téléphone connecté.
	    Ce goal est automatiquement lancé lors de l'exécution de la phase <varname>integration-test</varname> lorsqu'un projet contient des tests d'instrumentation
	    (<command>mvn install</command> ou <command>mvn integration-test</command>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:deploy-dependencies</term>

          <listitem>
            <para>Le goal <varname>deploy-dependencies</varname> déploie toutes les dépendances directes du type <varname>&lt;type&gt;apk&lt;/type&gt;</varname> dans ce projet.
	    Ce goal est souvent utilisé sur un projet qui contient des tests d'instrumentation pour déployer 
	    l'APK de l'application à tester avant le déploiement de l'APK contenant les classes de tests. 
	    Ce goal est automatiquement exécuté  lors de la phase  <varname>integration-test</varname> lorsqu'un projet contient des tests d'instrumentation
	    (<command>mvn install</command> ou <command>mvn integration-test</command>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:dex</term>

          <listitem>
            <para>Le goal <varname>dex</varname> convertit les classes Java compilées en en code exécutation Dalivk (format DEX).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:emulator-start</term>

          <listitem>
            <para>Le goal <varname>emulator-start</varname> démarre un émulateur.
            Les paramètres de démarrage peuvent être configurés dans la balise <varname>configuration</varname> du plugin Maven Android dans le <varname>pom.xml</varname>
            <programlisting>&lt;configuration&gt;
  ...
  &lt;emulator&gt;
    &lt;avd&gt;21&lt;/avd&gt;
    &lt;wait&gt;6000&lt;/wait&gt;
    &lt;options&gt;-no-skin&lt;/options&gt;
  &lt;/emulator&gt;
  ...
&lt;/configuration&gt;               </programlisting> ou par l'intermédiaire de la ligne de commande à l'extérieur du projet. 
<programlisting>mvn android:emulator-start \
    -Dandroid.emulator.avd=Default \
    -Dandroid.emulator.options=-no-skin \
    -Dandroid.emulator.wait=10000              </programlisting></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:emulator-stop</term>

          <listitem>
            <para>Le goal <varname>emulator-stops</varname> arrête un émulateur Android. Il peut être utilisé dans n'importe quel dossier.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:generate-sources</term>

          <listitem>
            <para>Le goal <varname>generate-sources</varname> génère le fichier <varname>R.java</varname> en fonction des ressources spécifiées 
	    dans le paramètre <varname>resources</varname> de la configuration.
	    Il génère les fichiers Java en fonction des fichiers aidl.</para>

            <para>Si le paramètre de configuration <varname>deleteConflictingFiles</varname> est à <varname>true</varname> (valeur par défaut), 
            ce goal supprime n'importe quel fichier <varname>R.java</varname> qu'il trouve dans le répertoire source, 
	    supprime n'importe quel fichier .java lorsqu'un fichier .aidl du même nom existe,
	    et supprime les fichiers <varname>Thumbs.db</varname> trouvés dans le répertoire contenant les ressources.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:instrument</term>

          <listitem>
            <para>The <varname>instrument</varname> goal runs the
            instrumentation android package on the device/emulator.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:internal-integration-test</term>

          <listitem>
            <para>Le goal <varname>internal-integration-test</varname> est appelé automatiquement lorsque la phase <varname>integration-test</varname> du cycle de vie est exécutée.
	    Il détermine s'il faut appeler le goal <varname> instrument</varname> durant cette phase en se basant sur l'existence de classes de tests d'instrumentation dans le projet courant.
	    Ce goal est interne au cycle de vie du plugin. Il ne doit pas être utilisé seul à partir de la ligne de commande.</para> 
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:internal-pre-integration-test</term>

          <listitem>
            <para>Le goal <varname>internal-pre-integration-test</varname> est appelé automatiquement lorsque la phase <varname>pre-integration-test</varname> du cycle de vie est exécutée.
	    Il détermine s'il faut appeler les goals <varname>android:deploy-dependencies</varname> et <varname>android:deploy</varname> de cette phase.
	    Ce goal est interne au cycle de vie du plugin. Il ne doit pas être utilisé seul à partir de la ligne de commande.</para> 
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:pull</term>

          <listitem>
            <para>Le goal <varname>pull</varname> peut être utilisé pour copier des fichiers ou des répertoires à partir d'un téléphone ou d'un émulateur connecté.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:push</term>

          <listitem>
            <para>Le goal <varname>push</varname> peut être utilisé pour copier des fichiers ou des répertoires sur un téléphone ou un émulateur connecté.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>android:undeploy</term>

          <listitem>
            <para>Le goal <varname>undeploy</varname> supprime un APK d'un téléphone ou d'un émulateur connecté.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</chapter>
